To find the strongly  connected compoments in directed graph (kosaraju algo):

i) Make two graph one normal and reverse.
	vi G[N];
	vi RG[N];
	REP(i,0,m-1){
		int a,b; cin>>a>>b;
		G[--a].pb(--b);
		RG[b].pb(a);
	}

ii) Run  first DFS two to make vector of the nodes (lets say odr) when its processing is completed.
	void dfs(int s){
		vis[s]=1;
		for(auto e: G[s]){
			if(vis[e]==0)dfs(e);
		}
		odr.pb(s);
	}

ii) reverse the odr and make vis of all i 0;

iii) now run DFS2 on elements of odr  (t-> temporary array and SC is vector<vi> which contains all the array of SCC.
	for(auto i:odr){
		if(vis[i])continue;
		t.clear();
		dfs1(i);
		SC.pb(t);
	}

	void dfs1(int s){
	vis[s]=1;
	for(auto e: RG[s]){
		if(vis[e]==0)dfs1(e);
	}
	t.pb(s);
}


---------************-------------------------------------------
CODE:
-------------***********************-----------------------------


const int N=1e5+5;

vi G[N];
vi RG[N];
bool vis[N];
vi odr;
vector<vi>SC;
vi t;

void dfs(int s){
	vis[s]=1;
	for(auto e: G[s]){
		if(vis[e]==0)dfs(e);
	}
	odr.pb(s);
}

void dfs1(int s){
	vis[s]=1;
	for(auto e: RG[s]){
		if(vis[e]==0)dfs1(e);
	}
	t.pb(s);
}

void solve(){
	int n; cin>>n;
	int m; cin>>m;
	REP(i,0,m-1){
		int a,b; cin>>a>>b;
		G[--a].pb(--b);
		RG[b].pb(a);
	}
	REP(i,0,n-1){
		if(vis[i]==0)dfs(i);
	}
	
	reverse(all(odr));
	REP(i,0,n-1)vis[i]=0;

	for(auto i:odr){
		if(vis[i])continue;
		t.clear();
		dfs1(i);
		SC.pb(t);
	}
	
}

----------------------------------------------*********************************-------------------------------



